# File management

:e              reload file
:q              quit
:q!             quit without saving changes
:w              write file
:w {file}       write new file
:x              write file and exit

# Movement

    k
  h   l         basic motion
    j

    b	ge
    w	e
    W	E
    B	gE

gg
{
- gk		k
0| ^		B b	gE ge     h l		w W  e E   $
Enter gj	j
}
G

w               next start of word
W               next start of whitespace-delimited word
e               next end of word
E               next end of whitespace-delimited word
b               previous start of word
B               previous start of whitespace-delimited word
0 |             start of line
^		start of first word on current line
$               end of line
{Enter}		start of next line 
-		start of previous line
gg              go to first line in file
G               go to end of file
gk		move down one displayed line
gj		move up one displayed line

[n]G		go to line number
[n]%		go to relative lines (precentage)

# Insertion
#   To exit from insert mode use Esc or Ctrl-C
#   Enter insertion mode and:

a               append after the cursor
A               append at the end of the line
i               insert before the cursor
I               insert at the beginning of the line
o               create a new line under the cursor
O               create a new line above the cursor
R               enter insert mode but replace instead of inserting chars
:r {file}       insert from file

# Editing

u               undo
yy              yank (copy) a line
y{motion}       yank text that {motion} moves over
yab ya{		yank curly-brace delimited block
ya[
ya(
ya<
ya"
ya'
yi[BLOCK]
p               paste after cursor
P               paste before cursor
<Del> or x      delete a character
dd              delete a line
d{motion}       delete text that {motion} moves over

# Search

/		search next
#		search previous
n		search next
* \*		find next instance of  word under cursor

# Search and replace with the `:substitute` (aka `:s`) command

:s/foo/bar/	replace the first match of 'foo' with 'bar' on the current line only
:s/foo/bar/g	replace all matches (`g` flag) of 'foo' with 'bar' on the current line only
:%s/foo/bar/g	replace all matches of 'foo' with 'bar' in the entire file (`:%s`)
:%s/foo/bar/gc	ask to manually confirm (`c` flag) each replacement 
:s/= .*$/= NULL;/g      replace string "= " to end of line to "= NULL;"
:s/,.\{-},/,/g          replace string "xxx,yyy,zzz," to "xxx,zzz,", (regex match ",yyy," ungreedy )
:10,33s/bar/bar		repalce line 10th to 33rd
:10,+33s/foo/bar	replace relative from current line
:10;+33s/foo/bar	..
:.			current line
:%			whole buffer
:$ 

# Preceding a motion or edition with a number repeats it 'n' times
# Examples:
50k         moves 50 lines up
2dw         deletes 2 words
5yy         copies 5 lines
42G         go to line 42

:g/[PATTERN]/d      delete lines which match <PATTERN>
:g!/[PATTERN]/d     delete lines which doesn't match <PATTERN>
d/[MY_PATTERN]      delete until matched string (it won't delete the matched string itself)

# How to load vim without any config?
vim -u NONE -U NONE -N -i NONE

# execute current lint to bash
# . range of currnet line, write to bash process
:.w !bash

# RANGE
<number>
.		current line
$		last line of current buffer
%		entire file(all lines)
*		last selection under VISUAL mode

# show current filename
# It save in register %
:echo @%

# vertical split
vim -O file0 file1

# buffer
## close all buffer, except current one
:%bd|e#

#
gi		goto last editing position
gI		goto last edition position's beginning of the line
gf		goto file under cursor
gx		open file under cursor

# QUICK FIX
:vimgrep [PATTERN] %	search PATTERN in current file, and populate quickfix list

:cope	:copen		open quickfix list
:cn	:cnext		goto next item in quickfix list


# INSERT MODE
# shortcut under insert mode
<C-E>		copy next line's char
<C-Y>		copy last line's char

delete
<C-w>		delete word under the cursor
<C-u>		delete everything before cursor

add
<C-t>		increase indentation
<C-d>		decrease indentation

<C-o>		back to normal mode for one command

# FOLD
- zfi{		fold inside of '{}'

<C-x><C-f>	auto-completing file name and file paths
