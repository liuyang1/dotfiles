# Path to your oh-my-zsh installation.
ZSH=$HOME/.oh-my-zsh

ZSH_THEME=myagnoster
ZSH_THEME=fast-agnoster
[[ -f ~/.zsh_local ]] && source ~/.zsh_local
# Set name of the theme to load.
# Look in ~/.oh-my-zsh/themes/
# Optionally, if you set this to "random", it'll load a random theme each
# time that oh-my-zsh is loaded.

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# The optional three formats: "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.

# fasd      fast switch directory, list recent files
# vi-mode
# zsh-syntax-highlighting       highlight command when input it.
# zaw       fuzzy history search
plugins=(fasd vi-mode zsh-syntax-highlighting zaw pip cabal autojump)

source $ZSH/oh-my-zsh.sh
unsetopt correct
unsetopt correct_all

# User configuration

[[ -f ~/.dircolors ]] && eval `dircolors ~/.dircolors`
# set dircolors colorful completion
zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}

# export MANPATH="/usr/local/man:$MANPATH"

PATH=$PATH:$HOME/.local/bin:$HOME/.cabal/bin
PATH=$PATH:$HOME/.gem/ruby/2.2.0/bin

[[ -f ~/.aliases ]] && source ~/.aliases

# [[ -s ~/.autojump/etc/profile.d/autojump.sh ]] && source ~/.autojump/etc/profile.d/autojump.sh

ulimit -c unlimited

export CCACHE_DIR=/tmp/ccache
export XDG_CACHE_HOME=/tmp/xdgcache

# make colorful MAN output
export LESS_TERMCAP_mb=$'\E[01;31m' # begin blinking
export LESS_TERMCAP_md=$'\E[01;31m' # begin bold
export LESS_TERMCAP_me=$'\E[0m' # end mode
export LESS_TERMCAP_se=$'\E[0m' # end standout-mode
export LESS_TERMCAP_so=$'\E[01;44;33m' # begin standout-odeinfobox
export LESS_TERMCAP_ue=$'\E[0m' # end underline
export LESS_TERMCAP_us=$'\E[01;32m' # begin underline

export EDITOR='vim'
# crontab need this.
export VISUAL='vim'
bindkey -v
set -o vi
# enter ESC key, lag 0.1 seconds (default 0.4 seconds)
export KEYTIMEOUT=1

export XMODIFIERS='@im=fcitx'
export XIM=fcitx
export XIM_PROGRAM=fcitx
export QT_IM_MODULE="fcitx"
export GTK_IM_MODULE="fcitx"


alias -s wiki=vim
alias -s py=python
alias -s sh=bash

export LANGUAGE=
export LANG="en_US.UTF8"
export LC_ALL="en_US.UTF8"
#export LANG="zh_CN.UTF8"
#export LC_ALL="zh_CN.UTF8"
export LC_CTYPE="en_US.UTF8"

# bindkey '^R' history-incremental-search-backward
bindkey '^R' zaw-history
zstyle ':filter-select' extended-search yes
# zle -N u
# bindkey "^F" u
bindkey '\e[A' history-search-backward
bindkey '\e[B' history-search-forward
# as page up page down
bindkey '\e[5~' history-search-backward
bindkey '\e[6~' history-search-forward
bindkey "\e[3~" delete-char
# VT
bindkey "\e[1~" beginning-of-line
bindkey "\e[4~" end-of-line
#
# # kvt
# bindkey "\e[H" beginning-of-line
# bindkey "\e[F" end-of-line
#
# # rxvt and konsole (i.e. the KDE-app...)
# bindkey "\e[7~" beginning-of-line
# bindkey "\e[8~" end-of-line

# VT220
bindkey "\eOH" beginning-of-line
bindkey "\eOF" end-of-line

zmodload zsh/terminfo
bindkey "$terminfo[kcuu1]"  history-search-backward
bindkey "$terminfo[kcud1]"  history-search-forward
bindkey -M vicmd 'k'        history-search-backward
bindkey -M vicmd 'j'        history-search-forward
set completion-ignore-case on

export HISTCONTROL=erasedups
export HISTSIZE=1000
export HISTIGNORE="cd(| *):(ls|dir)(| *):(rm|mv|cp|ln|scp|rmdir|mkdir) *:(echo|print)(| *):(g|)vim(| *):vi:vi *:e *:cat(| *):man *:(which|whence|type)(| *)|[fb]g(| *):feh *:pwd:exit(| *):date:kill(| *):ping *:ssh *:clear *:sleep *:history:tail *:head *:z *"
export SAVEHIST=1000
export HISTFILE=~/.zsh_history
unsetopt INC_APPEND_HISTORY
#setopt APPEND_HISTORY
setopt HIST_IGNORE_DUPS
setopt HIST_NO_FUNCTIONS
setopt HIST_IGNORE_SPACE
# unset hist_verify to instant get last command by !!
#setopt hist_verify
unsetopt hist_verify

# directory stack
# dirs -v
# print directory stack
#
# enter number to skip in directory stack
#
# cd -TAB, will list directory stack
setopt AUTO_PUSHD
setopt PUSHD_IGNORE_DUPS

setopt AUTO_LIST
setopt AUTO_MENU

setopt nolistambiguous

setopt interactivecomments

unset GNOME_KEYRING_CONTROL

settitle() {
    if [[ $TERM == "screen-256color" ]]; then
        printf "\033k$1\033\\"
    fi
}

# settitle "untitled"

export CLASSPATH=.:$HOME/.local/framework:$CLASSPATH

# on my urxvt it works with <alt>-<left>/-<right>
bindkey "\e\e[D" backward-word
bindkey "\e\e[C" forward-word

source "$HOME/.oh-my-zsh/custom/plugins/hub"
source "$HOME/.oh-my-zsh/custom/plugins/vimcmd.sh"

### make ctrl-z will return to vim
# first in vim, ctrl-z will put vim background, so we return to shell
# then in shell, ctrl-z will find background vim, so we return to vim
# Issue:
# This binding make cannot put second process to background
# Ref: http://sheerun.net/2014/03/21/how-to-boost-your-vim-productivity/
fancy-ctrl-z () {
  if [[ $#BUFFER -eq 0 ]]; then
    BUFFER="fg"
    zle accept-line
  else
    zle push-input
    zle clear-screen
  fi
}
zle -N fancy-ctrl-z
bindkey '^Z' fancy-ctrl-z
